require("mod_neural_net")
require("mod_map_wrapper")
require("mod_features")

local evalNet

local function getOtherPlayer(user, userList)
    for _, other in ipairs(userList) do
        if other.n ~= user.n then
            return other
        end
    end
end

function eval_predict_with_map(m, user)
    local enemy = getOtherPlayer(user, m:getUserList(false))
    local f = features.getAll(m, user, enemy)
    for _, val in ipairs(f) do
        -- if any feature is undefined, return nil
        -- TODO: stop NaNs in the first place
        if val ~= val then
            --print("invalid training data")
            return
        end
    end
    return evalNet:predict(f)[1]
end

-- TODO: make it work for teams or players
function eval_predict(items, user)
    local m = Map.new(items)
    return eval_predict_with_map(m, user)
end

local weights = {
    {
        {
            -0.01575155,
            -0.013628256,
            0.4448592,
            0.4006132,
            -0.0010601708,
            0.008745886,
            0.22477278,
            -0.033447586,
            0.46263698,
            0.368331
        },
        {
            -0.06748257,
            -0.039878108,
            0.37098804,
            0.37620294,
            -0.023839613,
            -0.04369337,
            0.5130435,
            0.004194054,
            0.3635059,
            0.38478157
        },
        {
            -0.04678878,
            -0.01691259,
            -0.21466585,
            -0.22990723,
            0.031782337,
            0.015503288,
            0.6230503,
            -0.012200139,
            -0.2658155,
            -0.24124515
        },
        {
            -0.04156523,
            -0.014305092,
            -0.123644635,
            -0.11367114,
            -0.059077334,
            -0.022544397,
            0.64298373,
            -0.037933744,
            -0.0862728,
            -0.109997705
        },
        {
            0.019339016,
            0.003478013,
            -1.29593,
            -1.375265,
            -0.032449394,
            -0.0035348423,
            2.0933585,
            -0.0119961435,
            -1.3605461,
            -1.3252447
        },
        {
            -0.037394337,
            0.040628042,
            0.34540012,
            0.33897382,
            0.012643884,
            0.006895247,
            0.3149221,
            -0.019995537,
            0.36827904,
            0.35552529
        },
        {
            0.02619467,
            -0.017949473,
            0.12949085,
            0.15891896,
            0.03640868,
            -0.00013642796,
            0.5200701,
            -0.026124515,
            0.05408734,
            0.08570925
        },
        {
            -0.006023985,
            -0.04550326,
            0.08892791,
            0.07313022,
            0.005861075,
            -0.009744014,
            0.5842309,
            -0.03716842,
            0.05843631,
            0.095891155
        },
        {
            -0.039296843,
            0.017209318,
            0.673589,
            0.65270615,
            -0.04277644,
            -0.00805755,
            0.15166919,
            0.0146759935,
            0.5971035,
            0.6485763
        }
    },
    {
        {0.04347616, 0.007828344, 0.029046543, -0.018597143, 0.009746429},
        {0.027829278, 0.038922098, -0.045061518, 0.031675387, -0.023346556},
        {-0.4260132, -0.019381715, 0.6068505, -0.3494036, 0.52407926},
        {-0.43104312, 0.025086304, 0.6423506, -0.4313504, 0.6070878},
        {-0.022529056, 0.030447353, -0.03208479, 0.0072385254, 0.011090357},
        {0.00675491, -0.05704269, 0.034953035, -0.00075523637, -0.015152539},
        {0.7433935, 0.0013872484, -0.09879501, 0.63307136, -0.09857316},
        {0.028599441, 0.031452764, -0.006415333, -0.0063043833, 0.035121154},
        {-0.53181326, -0.044567857, 0.5901855, -0.4405829, 0.5241877},
        {-0.44882238, -0.05353921, 0.6048184, -0.39841655, 0.56721854},
        {0.032182775, -0.025422808, 0.4239031, -0.026044035, 0.41788095}
    },
    {
        {-0.9064582},
        {0.015987575},
        {0.6350812},
        {-0.8171884},
        {0.6001224},
        {0.18842962}
    }
}

function initTestEval()
    evalNet = nn.new()
    for i = 1, #weights - 1 do
        evalNet:addLayer(weights[i], "relu", true)
    end
    evalNet:addLayer(weights[#weights], "sigmoid", true)
end
initTestEval()
initTestEval = nil
