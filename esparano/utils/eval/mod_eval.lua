require("mod_neural_net")
require("mod_map_wrapper")
require("mod_features")

local evalNet

local function getOtherPlayerN(map, userN)
    for i, p in ipairs(map:getPlanetList()) do
        if not p.neutral and p.owner ~= userN then
            return p.owner
        end
    end
end

function eval_predict_with_map(m, user)
    local enemyN = getOtherPlayerN(m, user.n)
    local f = features.getAll(m, user, m._items[enemyN])
    for _, val in ipairs(f) do
        -- if any feature is undefined, return nil
        -- TODO: stop NaNs in the first place
        if val ~= val then
            error("invalid training data")
            return
        end
    end
    return evalNet:predict(f)[1] * 2 - 1
end

-- TODO: make it work for teams or players
function eval_predict(items, user)
    local m = Map.new(items)
    return eval_predict_with_map(m, user)
end

local weights = {
    {
        {
            1.7603205,
            -0.37568727,
            -0.6733939,
            -2.552122,
            -0.6606755,
            -0.042580046,
            -0.40233752,
            -3.000398,
            -0.04340017,
            0.7347402
        },
        {
            0.37776527,
            0.5463412,
            0.18764274,
            0.44732222,
            0.04664498,
            -0.047632005,
            0.60313004,
            0.50784224,
            -0.008240201,
            -0.47181007
        },
        {
            -1.9395291,
            -1.071153,
            -0.70855635,
            0.06002458,
            0.6138569,
            0.024140846,
            -0.034094445,
            0.103474885,
            0.006715156,
            -1.2660774
        },
        {
            0.10901569,
            0.09143095,
            0.33578518,
            -0.65070707,
            0.63682145,
            -0.04613967,
            -0.36881298,
            0.09541017,
            -0.015401553,
            -0.13164614
        },
        {
            -1.2339818,
            -0.67403686,
            -1.3220109,
            0.10197009,
            0.393764,
            -0.009722568,
            0.9862576,
            -0.38467932,
            -0.01175778,
            1.6984992
        },
        {
            1.3719761,
            1.2681137,
            -1.0560755,
            0.9360693,
            -0.15174155,
            0.03926095,
            -0.18186414,
            -0.67524374,
            -0.031882226,
            1.63415
        },
        {
            -1.2045362,
            -2.1175623,
            -1.6734341,
            -1.4338692,
            -1.4727365,
            0.04040343,
            -0.78534317,
            -1.0718265,
            -0.015967201,
            -0.46570325
        },
        {
            0.3335347,
            1.577991,
            1.5841542,
            0.30909988,
            1.572885,
            -0.02552098,
            -1.3940659,
            -0.033525735,
            -0.0009001717,
            0.031086164
        },
        {
            0.24866562,
            -0.71830076,
            0.6988292,
            1.5329926,
            -0.7717442,
            -0.010265313,
            1.4712573,
            0.98405796,
            0.017997775,
            1.0583673
        }
    },
    {
        {
            -0.01692614,
            1.2523674,
            -0.47851372,
            -0.025203371,
            -0.23237683,
            -0.36036634,
            -0.27028778,
            -0.22609682,
            -0.0071041747,
            -0.72473794
        },
        {
            0.012210218,
            2.2840357,
            -1.265841,
            -0.022832824,
            -0.9082296,
            -0.5938024,
            -0.82888997,
            -1.0171939,
            0.0010348924,
            0.33886442
        },
        {
            -0.057620306,
            -0.28782392,
            1.2552956,
            -0.043920696,
            1.0418626,
            1.104598,
            1.1313741,
            0.89025307,
            -0.0200701,
            0.8518177
        },
        {
            -0.014328779,
            2.6671743,
            -0.39008933,
            -0.013658861,
            -0.033112235,
            -0.5162493,
            -0.22153474,
            -0.20426565,
            -0.020130327,
            1.9908078
        },
        {
            -0.041515697,
            -0.018863577,
            0.7318178,
            -0.027956236,
            0.8290624,
            0.9314916,
            0.83435965,
            0.631655,
            -0.0038204116,
            0.7895008
        },
        {
            0.025742266,
            0.023500253,
            0.03431983,
            0.012223028,
            -0.03312514,
            0.010966707,
            -0.041574575,
            0.020162608,
            0.029801395,
            0.02993809
        },
        {
            0.00628644,
            0.29249394,
            0.20662455,
            -0.046289135,
            0.6550676,
            0.664024,
            0.72987694,
            0.79598224,
            0.013495808,
            0.3073705
        },
        {
            -0.0003754118,
            0.15627792,
            0.91006017,
            0.00374272,
            0.91006076,
            0.98512113,
            0.6864178,
            0.37074426,
            -0.025517875,
            0.76732355
        },
        {
            -0.03260714,
            -0.04745246,
            -0.045690894,
            -0.019881332,
            -0.040214885,
            0.035096478,
            -0.0023481622,
            0.036203574,
            0.04070333,
            -0.032372165
        },
        {
            0.006027463,
            -0.95609105,
            0.34243676,
            -0.058779217,
            0.08949407,
            0.64680386,
            0.18787292,
            -0.008361133,
            0.0017609157,
            -1.1278603
        },
        {
            -0.030291306,
            0.8622007,
            0.36071712,
            -0.029809896,
            0.17388327,
            -0.09708845,
            0.007843893,
            0.12501317,
            -0.051421866,
            0.46038735
        }
    },
    {
        {0.01504938, -0.013245262, -0.0064076153, -0.065224975, 0.047150448, -0.0009994605},
        {1.1213683, -0.035470605, -0.04338644, 0.73102814, -2.3208177, -0.028799294},
        {0.7735497, -0.019689322, -0.26137823, 0.9544601, 0.22217748, -0.7207886},
        {-0.0068408716, 0.03401171, 0.06448214, -0.026536021, -0.03418296, -0.01747238},
        {-0.2817906, -0.04405898, 0.47306004, -0.2578914, 0.23294719, -0.11751618},
        {-0.3895431, -0.029765988, 0.5795485, -0.31203172, 0.12405744, 0.038676575},
        {-0.2707158, -0.029211795, 0.49015817, -0.17377603, 0.30016553, -0.08927824},
        {-0.08760027, 0.011731125, 0.4186449, -0.17822662, 0.32739514, -0.29576933},
        {-0.02354948, 0.010195516, 0.010095507, -0.022339975, -0.0037660198, -0.039017987},
        {-0.40395606, -0.03232757, 0.79329133, -0.40418187, 0.21902367, 0.5841983},
        {0.21334645, -0.044214368, 0.21877216, -0.13025449, -0.8202813, -0.30180728}
    },
    {
        {0.5005896},
        {-0.0016397834},
        {-0.34852162},
        {0.1497299},
        {-0.95020723},
        {-0.4079947},
        {0.06714754}
    }
}

function initTestEval()
    evalNet = nn.new()
    for i = 1, #weights - 1 do
        evalNet:addLayer(weights[i], "relu", true)
    end
    evalNet:addLayer(weights[#weights], "sigmoid", true)
end
initTestEval()
initTestEval = nil
