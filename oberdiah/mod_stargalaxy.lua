-- GALCON 2 MODS STARTER KIT
-- by tinny

function init()
	OPTIONS = {
		screen_width = 1400,
		screen_height = 900,
		max_production = 135,
		min_production = 50,
		number_of_planets = 50,
		size_of_map = 1 -- Number of 'screen widths' and 'screen heights' the map is wide - Larger than 10 is not recommended
	}
	GLOBAL = {
		lastex = 0, -- The last x coordinate that the user
		lastey = 0, -- The last x coordinate that the user
		clicked = 0, -- What stage the triple clicker is on
		moveright = 0, -- How far right the camera is
		movingright = 0, -- What speed to move right with the camera; stores data between event and loop
		moveup = 0, -- How far left the camera is
		movingup = 0, -- What speed to move left with the camera; stores data between event and loop
		countup = 0, -- How long it's been since the user last clicked
		lasers = true, -- Whether lasers should be enabled or not
		zoom = OPTIONS.size_of_map + 0.1, -- The zoom the user is on at the moment
		linelist = {}, -- A list of every line generated by shooting fleets
	}
    COLORS = {0x555555,
        0x0000ff,0xff0000,
        0xffff00,0x00ffff,
        0xffffff,0xffbb00,
        0x99ff99,0xff9999,
        0xbb00ff,0xff88ff,
        0x9999ff,0x00ff00,
    }
	
    main_menu()
end

function main_menu()
    g2.state = "menu"

    g2.html = [[
        <table>
            <tr><td><h1>Star Galaxy (Based on Star Wars)</h1>
            <tr><td><p>Created with Tinnys starter pack by Oberdiah, updated by birvine.</p>
            <tr><td><input type='button' value='Start' onclick='newmap' />
        </table>
    ]]
	
	g2.form.number_of_planets = OPTIONS.number_of_planets
	g2.form.max_production = OPTIONS.max_production
	g2.form.size_of_map = OPTIONS.size_of_map
	g2.form.lasers = true
	
end

function init_getready()
    g2.html = [[
        <table>
        <tr><td><input type='button' value='Start' onclick='resume' />
    ]]
end

function init_paused()
    g2.html = [[
        <table>
        <tr><td><input type='button' value='Resume' onclick='resume' />
    ]] .. sk_menu()
end

function init_win() 
  	g2.html = [[
        <table>
        <tr><td><h1>The galaxy is safe! Or is it . . . .</h1>
    ]] .. sk_menu()
end

function init_lose() 
    g2.html = [[
        <table>
        <tr><td><h1>You cannot hope to defeat the power of the Dark Side!!!</h1>
    ]] .. sk_menu()
end

function sk_menu()
    return [[
        <table>
        <tr><td><input type='button' value='New Map' onclick='restart' />
        <tr><td><input type='button' value='Quit' onclick='quit' />
    ]]
end

-- generate the map
function sk_mapGen(player, enemy, neutral)

    -- g2.new_planet(user, x_coords, y_coords, prod, ships)

    -- create individual planets
    g2.new_planet(player, -OPTIONS.screen_width*OPTIONS.size_of_map/2, -OPTIONS.screen_height*OPTIONS.size_of_map/2, 100, 100)
    g2.new_planet(enemy, OPTIONS.screen_width*OPTIONS.size_of_map/2, OPTIONS.screen_height*OPTIONS.size_of_map/2, 100, 100)
	
    for i=1,OPTIONS.number_of_planets do
		local xpos = math.random(-OPTIONS.screen_width * OPTIONS.size_of_map/2,OPTIONS.screen_width * OPTIONS.size_of_map/2)
		local ypos = math.random(-OPTIONS.screen_height * OPTIONS.size_of_map/2,OPTIONS.screen_height * OPTIONS.size_of_map/2)
		local rand1 = math.random(OPTIONS.min_production,OPTIONS.max_production)
		local rand2 = math.random(OPTIONS.min_production,OPTIONS.max_production)
    	planet = g2.new_planet(neutral, xpos, ypos, rand1, rand2/2);
	end
end

function loop(t)
	
	if GLOBAL.countup > 20 then
		GLOBAL.clicked = 0
		GLOBAL.countup = 0
	end
	
	local planets= g2.search("planet owner:"..GLOBAL.player)
	local fleets = g2.search("fleet owner:"..GLOBAL.player)
	local eplanets= g2.search("planet owner:"..GLOBAL.enemy)
	
	if #planets == 0 and #fleets == 0 then
		init_lose()
		g2.state = "pause"
	elseif #eplanets == 0 then
		init_win()
		g2.state = "pause"
	end
	
	local from_planets = g2.search("planet owner:"..GLOBAL.enemy)
	local from_fleets = g2.search("fleet owner:"..GLOBAL.enemy)
    local best_value = -math.huge
    local from
	local from_planet = true
    for _i,planet in ipairs(from_planets) do
        if planet.ships_value > best_value then 
            from = planet
            best_value = planet.ships_value
			from_planet = true
        end
    end
	for _i,fleet in ipairs(from_fleets) do
        if fleet.fleet_ships > best_value then 
            from = fleet
            best_value = fleet.fleet_ships
			from_planet = false
        end
    end
	
	for i,to_increment in ipairs(GLOBAL.linelist) do
		to_increment[2] = to_increment[2] + 1
		if to_increment[2] > 6 and to_increment[1] ~= nil then
			to_increment[1]:destroy()
			table.remove(GLOBAL.linelist, i)
		end
	end
	
    if from ~= nil then -- make sure a planet to attack from was found
        local to_planets = g2.search("planet -team:"..GLOBAL.enemy:team())
        best_value = -math.huge
        local to
        for _i,planet in ipairs(to_planets) do
            local value = -planet.ships_value + planet.ships_production - planet:distance(from)/5
            if value > best_value then
                to = planet
                best_value = value
            end
        end
        if to ~= nil and from_planet == true then from:fleet_send(100, to) end
		if to ~= nil and from_planet == false then from:fleet_redirect(to) end
    end
		local all_planets = g2.search("planet")
		local some_fleets = g2.search("fleet")
		for i,attacking in ipairs(some_fleets) do
			if math.random(0,1000) == 1 and attacking ~= nil then
				for i,attacked in ipairs(some_fleets) do
					if attacking:distance(attacked) < 200 and attacking.n ~= attacked.n and attacking.owner_n ~= attacked.owner_n then -- Rare invalid item error
						if attacking.owner_n == GLOBAL.player.n then
							line = g2.new_line(0x00FF00, attacking.position_x, attacking.position_y, attacked.position_x, attacked.position_y)
							g2.play_sound("sfx-player")
						else
							line = g2.new_line(0xCC0000, attacking.position_x, attacking.position_y, attacked.position_x, attacked.position_y)
							g2.play_sound("sfx-bot")
						end
						local linetable = {line, 0}
						table.insert(GLOBAL.linelist, linetable)
						attacked:destroy()
						table.remove(some_fleets, i)
						break
					end
				end
			end
		end
		local all_fleets = g2.search("fleet")
		for tablenumber,fleet in ipairs(all_fleets) do
			if fleet ~= nil and fleet.fleet_ships > 1 then
				for i = 0,fleet.fleet_ships do
					for _i,planet in ipairs(all_planets) do
						if planet.n == fleet.fleet_target then
							g2.new_fleet(fleet:owner(), 1, fleet, planet)
						end
					end
				end
				fleet:destroy()
			end
		end
end

--[[
					GLOBAL.player.fleet_v_factor = 0
					for i,planet in ipairs(all_planets) do
						if planet.n == attacking.fleet_target then
							g2.new_fleet(attacking:owner(), 1, attacking, planet)
						end
					end
					attacking:destroy()
					GLOBAL.player.fleet_v_factor = 1
	
	if planet.position_x > e.x + planet.planet_r and planet.position_x < e.x - planet.planet_r and planet.position_y > e.y + planet.planet_r and planet.position_y < e.y - planet.planet_r then
	
--]]

function event(e)
	if e["type"] == "onclick" and e["value"] then
        if e["value"] == "newmap" then
			OPTIONS.number_of_planets = g2.form.number_of_planets
			OPTIONS.max_production = g2.form.max_production
			OPTIONS.size_of_map = g2.form.size_of_map
            init_game();
            init_getready();
            g2.state = "pause"
		elseif (e["value"] == "restart") then
			main_menu()
        elseif (e["value"] == "resume") then
            g2.state = "play"
        elseif (e["value"] == "quit") then
            g2.state = "quit"
        end
    elseif e["type"] == "pause" then
        init_paused();
        g2.state = "pause"
    end
	
end

-- no need to touch this
function init_game()
	
	OPTIONS.number_of_planets = 50
	OPTIONS.min_production = 50	
	OPTIONS.max_production = 135
	
	OPTIONS.size_of_map = 0.6
	
    g2.game_reset();
    
	GLOBAL.clicked = 0
	GLOBAL.moveright = 0
	GLOBAL.movingright = 0
	GLOBAL.moveup = 0
	GLOBAL.movingup = 0
	GLOBAL.countup = 0
	GLOBAL.linelist = {}
	GLOBAL.mousecircle = nil
	
    -- set up users
    local neutral = g2.new_user("neutral", 0x999999)
    neutral.user_neutral = 1
    neutral.ships_production_enabled = 0
	GLOBAL.neutral = neutral

    local player = g2.new_user("player", 0x00FF00)
    g2.player = player
	GLOBAL.player = player
	
    local enemy = g2.new_user("bot", 0xCC0000)
    GLOBAL.enemy = enemy
	
    -- generate map
    sk_mapGen(player, enemy, neutral)
    g2.planets_settle()
end